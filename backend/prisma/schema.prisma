generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String       @unique
  password     String
  refreshToken String?
  bio          String?
  profilePic   String?
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Friendship[] @relation("FollowingRelation")
  following    Friendship[] @relation("FollowerRelation")
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime  @default(now())
  comments  Comment[]
  likes     Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  likes     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Friendship {
  id          Int      @id @default(autoincrement())
  followerId  Int
  follower    User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followingId Int
  following   User     @relation("FollowingRelation", fields: [followingId], references: [id], onDelete: Cascade)
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}
